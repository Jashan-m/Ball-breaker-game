import pygame
import random

pygame.init()



screen = pygame.display.set_mode((swidth, sheight))
pygame.display.set_caption("DX Ball Game")

font = pygame.font.SysFont(None, 36)

def draw_text(text, font, color, surface, x, y):
    textobj = font.render(text, True, color)
    textrect = textobj.get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)

def draw_start_screen():
    screen.fill(BACKGROUND_COLOR)
    draw_text('DX Ball Game', font, (255, 255, 255), screen, swidth // 2 - 100, sheight // 2 - 50)
    start_button = pygame.Rect(swidth // 2 - 70, sheight // 2 + 20, 140, 50)
    pygame.draw.rect(screen, (0, 128, 0), start_button)
    draw_text('Start Game', font, (255, 255, 255), screen, swidth // 2 - 60, sheight // 2 + 30)
    return start_button

def draw_restart_button():
    restart_button = pygame.Rect(swidth // 2 - 70, sheight // 2 + 60, 140, 50)
    pygame.draw.rect(screen, (255, 0, 0), restart_button)
    draw_text('Restart', font, (255, 255, 255), screen, swidth // 2 - 50, sheight // 2 + 70)
    return restart_button

def handle_start_screen():
    start_button = draw_start_screen()
    start_game = False

    while not start_game:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if start_button.collidepoint(event.pos):
                    return True
        pygame.display.flip()
        clock.tick(FPS)

def game_loop():
    ball_x = swidth // 2
    ball_y = sheight // 2
    ball_speed_x = random.choice([-5, 5])
    ball_speed_y = -5

    paddle_x = (swidth - PADDLE_WIDTH) // 2
    paddle_y = sheight - PADDLE_HEIGHT - 30

    bricks = []
    for row in range(ROWS):
        for col in range(COLS):
            xbrick = col * (bwidth + 10) + 35
            ybrick = row * (bheight + 10) + 50
            bricks.append(pygame.Rect(xbrick, ybrick, bwidth, bheight))

    running = True
    game_over = False
    score = 0

    while running:
        screen.fill(BACKGROUND_COLOR)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEMOTION:
                paddle_x = event.pos[0] - PADDLE_WIDTH // 2

        if paddle_x < 0:
            paddle_x = 0
        elif paddle_x > swidth - PADDLE_WIDTH:
            paddle_x = swidth - PADDLE_WIDTH

        if not game_over:
            ball_x += ball_speed_x
            ball_y += ball_speed_y

            if ball_x - BALL_RADIUS <= 0 or ball_x + BALL_RADIUS >= swidth:
                ball_speed_x = -ball_speed_x
            if ball_y - BALL_RADIUS <= 0:
                ball_speed_y = -ball_speed_y

            if (paddle_y <= ball_y + BALL_RADIUS <= paddle_y + PADDLE_HEIGHT and
                paddle_x <= ball_x <= paddle_x + PADDLE_WIDTH):
                ball_speed_y = -ball_speed_y

            for brick in bricks[:]:
                if brick.collidepoint(ball_x, ball_y):
                    ball_speed_y = -ball_speed_y
                    bricks.remove(brick)
                    score += 10
                    break

            if ball_y > sheight:
                game_over = True

        pygame.draw.circle(screen, BALL_COLOR, (ball_x, ball_y), BALL_RADIUS)
        pygame.draw.rect(screen, PADDLE_COLOR, (paddle_x, paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT))
        for brick in bricks:
            pygame.draw.rect(screen, BRICK_COLOR, brick)
        draw_text(f'Score: {score}', font, (255, 255, 255), screen, 5, 5)

        if game_over:
            draw_text('Game Over!', font, (255, 255, 255), screen, swidth // 2 - 100, sheight // 2 - 30)
            restart_button = draw_restart_button()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return False
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if restart_button.collidepoint(event.pos):
                        return True

        pygame.display.flip()
        clock.tick(FPS)

    return False

clock = pygame.time.Clock()

def main():
    while True:
        if not handle_start_screen():
            break
        if not game_loop():
            break

    pygame.quit()

if __name__ == "__main__":
    main()
